geom_bar(aes(fill = class), show.legend = F) +
facet_wrap(~ class)
titanic_clean
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = age_status), show.legend = F) +
facet_wrap(~ age_status)
titanic_clean %>%
distinct(crew)
titanic_clean %>%
distinct(class)
titanic_clean
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = embarked), show.legend = F) +
facet_wrap(~ embarked)
titanic_clean
titanic_clean <- titanic_set %>%
filter(!is.na(survived)) %>%  # remove passengers without a survived flag
# turn important variables into factors
mutate(across(c(sex, survived, pclass, embarked), as.factor)) %>%
# create an age_status variable which groups passengers into children and adults
mutate(age_status = if_else(age <= 16, "child", "adult"), .after = age) %>%
# make class and survived , variables more interpretable
mutate(class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarked = factor(embarked, levels = c("S", "C", "Q"), labels = c("Southamption", "Chambourd", "Queenstown"))) %>%
select(-c(1, passenger_id, name, ticket, fare, cabin)) %>% # drop the unhelpful variables
drop_na()
titanic_clean
titanic_clean <- titanic_set %>%
filter(!is.na(survived)) %>%  # remove passengers without a survived flag
# turn important variables into factors
mutate(across(c(sex, survived, pclass, embarked), as.factor)) %>%
# create an age_status variable which groups passengers into children and adults
mutate(age_status = if_else(age <= 16, "child", "adult"), .after = age) %>%
# make class and survived , variables more interpretable
mutate(class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarked = factor(embarked, levels = c("S", "C", "Q"), labels = c("Southamption", "Cherbourg", "Queenstown"))) %>%
select(-c(1, passenger_id, name, ticket, fare, cabin)) %>% # drop the unhelpful variables
drop_na()
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = port_embarked), show.legend = F) +
facet_wrap(~ port_embarked)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop_survived = n()/nrow(titanic_clean) * 100)
titanic_clean
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop_survived = n(survived == 1)/n() * 100)
titanic_clean %>%
group_by(port_embarked)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop_survived = n(survived == 1)/n() * 100)
titanic_clean %>%
group_by(port_embarked)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop_survived = n(survived == 1) * 100)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop_survived = nrow(survived == 1) * 100)
titanic_clean %>%
group_by(port_embarked) %>%
reframe(prop_survived = nrow(survived == 1) * 100)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop_survived = n()/nrow(titanic_clean) * 100)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived))
titanic_clean %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = count(survived))
titanic_clean
titanic_clean %>%
mutate(survived = as.numeric(survived))
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived))
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
distinct(survived)
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean <- titanic_set %>%
filter(!is.na(survived)) %>%  # remove passengers without a survived flag
# turn important variables into factors
mutate(across(c(sex, survived, pclass, embarked), as.factor)) %>%
# create an age_status variable which groups passengers into children and adults
mutate(age_status = if_else(age <= 16, "child", "adult"), .after = age) %>%
# make class and survived , variables more interpretable
mutate(class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarked = factor(embarked, levels = c("S", "C", "Q"), labels = c("Southampton", "Cherbourg", "Queenstown"))) %>%
select(-c(1, passenger_id, name, ticket, fare, cabin)) %>% # drop the unhelpful variables
drop_na()
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = count(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(n(),
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
nrow()
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
filter(survived == 1) %>%
nrow()
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(n(),
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(n(),
prop = n()/nrow(titanic_clean) * 100,
n_survived = nrow(survived == 1),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = nrow(survived == 1),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = nrow(survived == 1),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = nrow(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = n(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = n(survived == 1),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = n(),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
filter(survived == 1) %>%
nrow()
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived ==1]),
n_total = n())
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
filter(survived == 1) %>%
nrow()
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived ==1]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = count(survived[survived ==1]),
n_total = n())
titanic_clean %>%
# mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = count(survived[survived ==1]),
n_total = n())
titanic_clean %>%
# mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = count(survived ==1),
n_total = n())
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
filter(survived == 1)
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
filter(survived == 1) %>%
nrow()
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived == 1]),
n_total = n())
titanic_clean %>%
filter(port_embarked == "Southampton") %>%
filter(survived == 1) %>%
nrow()
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived == 1]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived == 0]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived == 0),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived == 0]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived == 1]),
n_total = n())
titanic_clean %>%
#mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived == 1]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived_flag == "Yes"]),
n_total = n())
titanic_clean %>%
mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked)
titanic_clean
titanic_clean %>%
mutate(survived = as.numeric(survived))
titanic_clean
titanic_clean <- titanic_set %>%
filter(!is.na(survived)) %>%  # remove passengers without a survived flag
# turn important variables into factors
mutate(across(c(sex, pclass, embarked), as.factor)) %>%
# create an age_status variable which groups passengers into children and adults
mutate(age_status = if_else(age <= 16, "child", "adult"), .after = age) %>%
# make class and survived , variables more interpretable
mutate(class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarked = factor(embarked, levels = c("S", "C", "Q"), labels = c("Southampton", "Cherbourg", "Queenstown"))) %>%
select(-c(1, passenger_id, name, ticket, fare, cabin)) %>% # drop the unhelpful variables
drop_na()
titanic_clean %>%
#mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived_flag == "Yes"]),
n_total = n())
titanic_clean %>%
#mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived_flag == "Yes"]),
n_total = n(),
survived_prop = n_survived/n_total)
titanic_clean %>%
#mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived_flag == "Yes"]),
n_total = n(),
survived_prop = n_survived/n_total * 100)
titanic_clean %>%
#mutate(survived = as.numeric(survived)) %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived_flag == "Yes"]),
n_total = n(),
survived_prop = n_survived/n_total * 100) %>%
ggplot(aes(x = port_embarked, y = survived_prop)) +
geom_col(aes(fill = port_embarked), show.legend = F)
# set the random seed number to keep interpretations of model consistent with model itself
set.seed(3)
n_data <- nrow(titanic_clean)
# create a test sample index
test_index <- sample(1:n_data, size = n_data*0.2)
# create test set
titanic_test  <- slice(titanic_clean, test_index)
# create training set
titanic_train <- slice(titanic_clean, -test_index)
# check balanced sets
titanic_test %>%
janitor::tabyl(survived_flag)
titanic_train %>%
janitor::tabyl(survived_flag)
library(splitstackshape) # to force stratification on test and training sets
install.packages("splitstackshape")
library(splitstackshape) # to force stratification on test and training sets
sets <- stratified(titanic_clean, group = c("survived_flag", "sex", "class", "age_status"), bothSets = TRUE, size = 0.2)
titanic_test <- sets$SAMP1
titanic_train <- sets$SAMP2
nrow(titanic_test)
nrow(titanic_train)
sets <- stratified(titanic_clean, group = c("survived_flag", "sex", "class", "age_status"), bothSets = TRUE, size = 0.2)
titanic_test <- sets$SAMP1
titanic_train <- sets$SAMP2
nrow(titanic_test)
nrow(titanic_train)
titanic_test %>%
janitor::tabyl(survived_flag)
titanic_train %>%
janitor::tabyl(survived_flag)
titanic_fitted <- rpart(survived_flag ~ .,
data = titanic_train,
method = 'class')
rpart.plot(titanic_fitted, yesno = 2)
library(rpart) # to create the tree
library(rpart.plot) # to plot the tree
library(splitstackshape) # to force stratification on test and training sets
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
# create a vector of all the row numbers randomised
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_clean <- titanic_set %>%
filter(!is.na(survived)) %>%  # remove passengers without a survived flag
# turn important variables into factors
mutate(across(c(sex, pclass, embarked), as.factor)) %>%
# create an age_status variable which groups passengers into children and adults
mutate(age_status = if_else(age <= 16, "child", "adult"), .after = age) %>%
# make class and survived , variables more interpretable
mutate(class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarked = factor(embarked, levels = c("S", "C", "Q"), labels = c("Southampton", "Cherbourg", "Queenstown"))) %>%
select(-c(1, passenger_id, name, ticket, fare, cabin)) %>% # drop the unhelpful variables
drop_na()
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(fill = "indianred")
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = sex), show.legend = F) +
facet_wrap(~ sex)
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = class), show.legend = F) +
facet_wrap(~ class)
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = age_status), show.legend = F) +
facet_wrap(~ age_status)
titanic_clean %>%
ggplot(aes(x = survived_flag)) +
geom_bar(aes(fill = port_embarked), show.legend = F) +
facet_wrap(~ port_embarked)
titanic_clean %>%
group_by(port_embarked) %>%
summarise(
prop = n()/nrow(titanic_clean) * 100,
n_survived = sum(survived[survived_flag == "Yes"]),
n_total = n(),
survived_prop = n_survived/n_total * 100) %>%
ggplot(aes(x = port_embarked, y = survived_prop)) +
geom_col(aes(fill = port_embarked), show.legend = F)
# set the random seed number to keep interpretations of model consistent with model itself
set.seed(3)
n_data <- nrow(titanic_clean)
# create a test sample index
test_index <- sample(1:n_data, size = n_data*0.2)
# create test set
titanic_test  <- slice(titanic_clean, test_index)
# create training set
titanic_train <- slice(titanic_clean, -test_index)
# check balanced sets
titanic_test %>%
janitor::tabyl(survived_flag)
titanic_train %>%
janitor::tabyl(survived_flag)
sets <- stratified(titanic_clean, group = c("survived_flag", "sex", "class", "age_status"), bothSets = TRUE, size = 0.2)
titanic_test <- sets$SAMP1
titanic_train <- sets$SAMP2
nrow(titanic_test)
nrow(titanic_train)
titanic_test %>%
janitor::tabyl(survived_flag)
titanic_train %>%
janitor::tabyl(survived_flag)
titanic_fitted <- rpart(survived_flag ~ .,
data = titanic_train,
method = 'class')
rpart.plot(titanic_fitted, yesno = 2)
titanic_fitted <- rpart(survived_flag ~ .,
data = titanic_train,
method = 'class')
rpart.plot(titanic_fitted, yesno = 2)
titanic_fitted <- rpart(survived_flag ~ .,
data = titanic_train,
method = 'class')
rpart.plot(titanic_fitted, yesno = 2)
titanic_fitted
